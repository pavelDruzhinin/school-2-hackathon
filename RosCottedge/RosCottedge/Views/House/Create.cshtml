@model RosCottedge.Models.House

@{
    ViewBag.Title = "Добавление дома";
    Layout = "~/Views/Shared/_LayoutForm.cshtml";
}



<div class="Form FormCreate mainBox">
    @using (Html.BeginForm("Create", "House", FormMethod.Post, new { id = "validCreateHouse" }))
    {
        @Html.AntiForgeryToken()


        @Html.ValidationSummary(true, "")


        <div class="innerForm">
            <div class="topCreate"></div>
            <div class="fields">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control largeInputCreate", @placeholder = "Название дома" } })

                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control smallInputCreate", @placeholder = "Стоимость" } })

                @Html.EditorFor(model => model.NumberOfPersons, new { htmlAttributes = new { @class = "form-control smallInputCreate floatInput", @placeholder = "Количество человек" } })
                <div id="forTwoFields"></div>

                <div class="searchHouse"><label>Адрес для поиска: </label><input id="address" style="width:100%;" type="text" placeholder="Найдите ваш дом" /></div>
                <div id="map_canvas" style="width:100%; height:400px; margin-bottom:0; margin-top: 15px;"></div>
                <div id="errorMap" style="width:100%; margin-top: 4px; display:none;"><p style="font-size: 14px; color: #E32444;">Неверно выбран адрес</p></div>

                <div class="textManualAddress">
                    <p>Поиск не помогает, укажите на карте местоположение дома и введите адрес вручную. <br /></p>
                    <span class="manualAddress">Ввести вручную?</span>
                </div>
                <div class="manualInput">
                    <input class="smallInputCreate" type="text" name="Region" id="Region" value="" placeholder="Область" />
                    <input class="smallInputCreate floatInput" type="text" name="Locality" id="Locality" value="" placeholder="Город" />
                    <input class="smallInputCreate" type="text" name="Area" id="Area" value="" placeholder="Улица" />
                    <input class="smallInputCreate floatInput" type="text" name="HouseNumber" id="HouseNumber" value="" placeholder="Дом" />
                </div>

                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @placeholder = "Описание" } })

                @Html.EditorFor(model => model.Food, new { htmlAttributes = new { @class = "form-control", @placeholder = "Питание" } })

                @Html.EditorFor(model => model.Transfer, new { htmlAttributes = new { @class = "form-control", @placeholder = "Трансфер" } })

                @Html.EditorFor(model => model.ServicesIncluded, new { htmlAttributes = new { @class = "form-control", @placeholder = "Услуги, включенные в стоимость" } })

                @Html.EditorFor(model => model.AdditionalServices, new { htmlAttributes = new { @class = "form-control", @placeholder = "Услуга за отдельную плату" } })

                @Html.EditorFor(model => model.Accomodations, new { htmlAttributes = new { @class = "form-control", @placeholder = "Условия проживания" } })

                @Html.EditorFor(model => model.BookingConditions, new { htmlAttributes = new { @class = "form-control", @placeholder = "Условия бронирования" } })

                <input class="ButtonCreate" type="submit" value="Разместить дом" />

                
                @*<label>Широта (latitude): </label>*@<input id="latitude" name="lat" type="hidden" />
                @*<label>Длогота (longitude): </label>*@<input id="longitude" name="lng" type="hidden" />

            </div>
        </div>
    }
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDJZlsRr82NdMVjqUPb1fVy-t49lPdTgrw">
</script>
<script>
    $(document).ready(function () {
        init();

        $('.manualAddress').on('click', function () {
            $('.manualInput').css('display', 'block');
            $('.searchHouse').css('display', 'none');
            $('.manualInput input').val('');
            $('.textManualAddress').css('display', 'none');
        });

        $(function () {
            $("#address").autocomplete({
                //Определяем значение для адреса при геокодировании
                source: function (request, response) {
                    geocoder.geocode({ 'address': request.term }, function (results, status) {
                        response($.map(results, function (item) {
                            return {
                                label: item.formatted_address,
                                value: item.formatted_address,
                                latitude: item.geometry.location.lat(),
                                longitude: item.geometry.location.lng()
                            }
                        }));
                    })
                },
                //Выполняется при выборе конкретного адреса
                select: function (event, ui) {
                    $("#latitude").val(ui.item.latitude);
                    $("#longitude").val(ui.item.longitude);
                    var location = new google.maps.LatLng(ui.item.latitude, ui.item.longitude);
                    marker.setPosition(location);
                    map.setCenter(location);
                    MapGoogle();
                }
            });
        });

        //Добавляем слушателя события обратного геокодирования для маркера при его перемещении
        google.maps.event.addListener(marker, 'drag', function () {
            MapGoogle();
        });
        google.maps.event.addListener(map, 'click', function (event) {
            placeMarker(event.latLng);
            MapGoogle();
        });

        function MapGoogle() {
            geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        var addr = results[0].address_components;
                        $('#address').val(results[0].formatted_address);
                        $('#latitude').val(marker.getPosition().lat());
                        $('#longitude').val(marker.getPosition().lng());
                        $('#Region').val(addr[4].short_name);
                        $('#Locality').val(addr[2].short_name);
                        $('#Area').val(addr[1].short_name);
                        $('#HouseNumber').val(addr[0].short_name);
                    }
                }
            });
        }

        function placeMarker(location) {
            if (marker) {
                marker.setPosition(location);
            } else {
                marker = new google.maps.Marker({
                    position: location,
                    map: map
                });
            }
        }

    });



    var styleArray = [
        {
            "featureType": "landscape.natural",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#bff0ca"
                }
            ]
        },
        {
            "featureType": "water",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#81d4fa"
                }
            ]
        }
    ];

    var geocoder;
    var map;
    var marker;

    function init() {
        //Определение карты
        var latlng = new google.maps.LatLng(61.7930796, 34.3755158);
        var options = {
            zoom: 15,
            center: latlng,
            scrollwheel: false,
            styles: styleArray
        };

        map = new google.maps.Map(document.getElementById("map_canvas"), options);

        //Определение геокодера
        geocoder = new google.maps.Geocoder();

        marker = new google.maps.Marker({
            map: map,
            draggable: true
        });
    };
</script>
}